service: genkidama-backend-api

frameworkVersion: "1.39.0"

provider:
  name: aws
  runtime: nodejs8.10
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-kadai
    DYNAMODB_TABLE_USER: ${self:service}-${opt:stage, self:provider.stage}-user
    S3_BUCKET: ${self:service}-${opt:stage, self:provider.stage}-photo
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
      Resource: "arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*"

plugins:
  - serverless-s3-sync

functions:
  create-kadai:
    handler: kadai/create.create
    events:
      - http:
          path: kadai
          method: post
          cors: true

  get-kadai:
    handler: kadai/get.get
    events:
      - http:
          path: kadai/{id}
          method: get
          cors: true
          request:
            parameters:
              path:
                id: true

  list-kadai:
    handler: kadai/list.list
    events:
      - http:
          path: kadai
          method: get
          cors: true

  get-comments:
    handler: comment/get.get
    events:
      - http:
          path: comment/{kadaiId}
          method: get
          request:
            parameters:
              path:
                kadaiId: true

  add-comment:
    handler: comment/add.add
    events:
      - http:
          path: comment/{kadaiId}
          method: put
          request:
            parameters:
              path:
                kadaiId: true

  list-user:
    handler: user/list.list
    events:
      - http:
          path: user
          method: get
          cors: true

  get-user:
    handler: user/get.get
    events:
      - http:
          path: user/{id}
          method: get
          cors: true
          request:
            parameters:
              path:
                id: true

  create-user:
    handler: user/create.create
    events:
      - http:
          path: user
          method: post
          cors: true


  donate-point:
    handler: point/donate.donate
    events:
      - http:
          path: point
          method: post
          cors: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - 
            AttributeName: kadaiId
            AttributeType: S
        KeySchema:
          - 
            AttributeName: kadaiId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    UsersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - 
            AttributeName: userId
            AttributeType: S
        KeySchema:
          - 
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_USER}
    photoBacket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
    photoBacketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket:
          Ref: photoBacket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
                Fn::Join: ["", ["arn:aws:s3:::",{"Ref": "photoBacket"},"/*"]]

custom:
  s3Sync:
    - bucketName: ${self:provider.environment.S3_BUCKET}
      localDir: static
      deleteRemoved: false
